{
  "app": "executor",
  "version": "0.0.1",
  "category": "tiff",
  "name": "Write TIFF",
  "tags": [
    "matrices",
    "i/o"
  ],
  "id": "7e87c2b5-2027-4c01-8eb4-3045948b71e4",
  "language": "java",
  "java": {
    "class": "net.algart.executors.modules.maps.tiff.WriteTiff"
  },
  "in_ports": [
    {
      "value_type": "mat",
      "name": "input",
      "hint": "Source image, that will be written as a new TIFF IFD image\nor added to the current IFD, if the file is already opened."
    },
    {
      "value_type": "scalar",
      "name": "file",
      "caption": "file",
      "hint": "[Optional] String path to the file. If specified, it is used instead of \"File\" parameter (with all replacements performed in that parameter)."
    },
    {
      "value_type": "scalar",
      "name": "file_name_addition",
      "caption": "file name addition",
      "hint": "[Optional] Modification for input file name."
    },
    {
      "value_type": "scalar",
      "name": "close_file",
      "caption": "close file",
      "hint": "\"true\"/\"false\": if \"true\", the input file will be always closed after executing."
    }
  ],
  "out_ports": [
    {
      "value_type": "scalar",
      "name": "valid",
      "hint": "\"true\" if the input file is in TIFF format and it was read successfully;\n\"false\" in other case (in particular in a case of some exception)."
    },
    {
      "value_type": "scalar",
      "name": "ifd_index",
      "hint": "Index of currently written IFD."
    },
    {
      "value_type": "scalar",
      "name": "number_of_images",
      "hint": "Number of ready IFD images."
    },
    {
      "value_type": "scalar",
      "name": "image_dim_x"
    },
    {
      "value_type": "scalar",
      "name": "image_dim_y"
    },
    {
      "value_type": "scalar",
      "name": "ifd",
      "hint": "IFD information in JSON format."
    },
    {
      "value_type": "scalar",
      "name": "pretty_ifd",
      "hint": "IFD information in human-readable format."
    },
    {
      "value_type": "scalar",
      "name": "file_size",
      "hint": "Length of TIFF file."
    },
    {
      "value_type": "scalar",
      "name": "closed",
      "hint": "Flag true/false: it will be true when the TIFF file was closed by this function, false if it stayed to be opened.\nUseful for debugging needs.",
      "advanced": true
    },
    {
      "value_type": "scalar",
      "name": "absolute_path",
      "caption": "absolute path",
      "hint": "Actual full absolute path to the file.",
      "advanced": true
    },
    {
      "value_type": "scalar",
      "name": "parent_folder",
      "caption": "parent folder",
      "hint": "Absolute path to the parent folder of the file.",
      "advanced": true
    },
    {
      "value_type": "scalar",
      "name": "file_name",
      "caption": "file name",
      "hint": "Actual file name (without folder).",
      "advanced": true
    }
  ],
  "controls": [
    {
      "caption": "File",
      "name": "file",
      "description": "You can use here relative paths (without starting \"/\" or \"c:\\\"), for example, \"test.tiff\" or \"images/test.tiff\". They will be resolved relative the current folder, containing the executed chain.\nIf this path starts with substring %TEMP%, %TEMP%/ or %TEMP%x. where x is OS-depended file separator character, this substring is replaced with the full path to the system temp directory (System.getProperty(\"java.io.tmpdir\")) with ending file separator. For example, it is correct to write here %TEMP%my_file.dat, %TEMP%/my_file.dat or (in Windows) %TEMP%\\my_file.dat.\nAlso you can use in this string Java system properties: \"${name}\", for example: \"${java.io.tmpdir}\", and executor system properties \"${path.name.ext}\", \"${path.name}\", \"${file.name.ext}\", \"${file.name}\", \"${resources}\" (chain path/file name with/without extension, resource folder of the platform, containing this function).",
      "value_type": "String",
      "edition_type": "file",
      "default": ""
    },
    {
      "name": "fileNameAdditionMode",
      "caption": "How to add \"file name addition\" (for example XXX.DAT)",
      "description": "This mode can be used together with input string \"file name addition\"",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "NONE",
          "caption": "no correction (\"file name addition\" is not used)"
        },
        {
          "value": "AFTER_ALL_PATH",
          "caption": "after all path: /path => /pathXXX.DAT"
        },
        {
          "value": "REPLACE_IN_PATH",
          "caption": "replace $$$ in path: /path/name$$$.ext => /path/nameXXX.DAT.ext"
        },
        {
          "value": "REPLACE_IN_PATH_REMOVING_EXTENSION",
          "caption": "replace $$$ with the addition, but without its extension: /path/name$$$.ext => /path/nameXXX.ext"
        }
      ],
      "default": "NONE",
      "advanced": true
    },
    {
      "caption": "Secure mode",
      "name": "secure",
      "description": "If set, \"file name addition\" feature and Java system properties in the path are disabled, and the path is checked that it does not contain \"suspicious\" characters/substring like % (property?), ${... (variable inside a string?). Executor system properties \"${path.name.ext}\", \"${path.name}\", \"${file.name.ext}\", \"${file.name}\" and starting %TEMP%/ are enabled.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": false
    },
    {
      "caption": "When to open/close TIFF file?",
      "name": "openingMode",
      "description": "Recommended mode for usage in a loop (one frame per iteration) is \"Open/reopen on reset or when closed; read; not close\".\nNote: the main information about the TIFF image is written while opening the file.\nNote: in first 2 modes \"Open/reopen...\", the previous file, which was probably opened, is automatically closed. The 3rd mode, recommended above for loops, does the same while reset of the loop (while the first iteration).\nAlso note: the TIFF file will be closed at the end of executing this function in any case, if \"close_file\" input port contains \"true\" value. In addition, this file is always closed in a case of any exception.",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "OPEN_AND_CLOSE",
          "caption": "Open/reopen; read; close"
        },
        {
          "value": "OPEN",
          "caption": "Open/reopen; read; but not close"
        },
        {
          "value": "OPEN_ON_RESET_AND_FIRST_CALL",
          "caption": "Open/reopen on reset or when closed; read; not close"
        },
        {
          "value": "OPEN_ON_FIRST_CALL",
          "caption": "Open/reopen when closed; read; not close"
        }
      ],
      "default": "OPEN_AND_CLOSE"
    },
    {
      "caption": "Append to existing TIFF",
      "name": "appendIFDToExistingTiff",
      "description": "If set, this function appends a new IFD image to the end of an existing file. If not set, this function deletes the specified file (when it exists) before any other actions This flag has no effect if the specified file does not exist.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": false
    },
    {
      "caption": "BigTIFF",
      "name": "bigTiff",
      "description": "If set, the new file will be created in BigTIFF format. This is necessary if you plan to create TIFF larger than 4 GB. If you are sure that your file will never be so large, even after possible appending new IFD images, you may stay this flag cleared: usual TIFF (non BigTIFF) is is compatible with larger number of viewers, for example with OS built-in viewers.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": false
    },
    {
      "caption": "Byte order",
      "name": "byteOrder",
      "description": "Byte order in the newly created TIFF.",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "BIG_ENDIAN",
          "caption": "big-endian"
        },
        {
          "value": "LITTLE_ENDIAN",
          "caption": "little-endian"
        },
        {
          "value": "NATIVE",
          "caption": "native (optimal for current computer)"
        }
      ],
      "default": "NATIVE"
    },
    {
      "caption": "TIFF compression mode",
      "name": "compression",
      "description": "TIFF compression format, used for encoding this IFD image.",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "UNCOMPRESSED",
          "caption": "Uncompressed (TIFF tag 1)"
        },
        {
          "value": "LZW",
          "caption": "LZW (TIFF tag 5)"
        },
        {
          "value": "DEFLATE",
          "caption": "Deflate (TIFF tag 8)"
        },
        {
          "value": "JPEG",
          "caption": "JPEG (TIFF tag 7)"
        },
        {
          "value": "JPEG_2000_LOSSLESS",
          "caption": "JPEG-2000 lossless (TIFF tag 33003, used by Aperio)"
        },
        {
          "value": "JPEG_2000_LOSSLESS_ALTERNATIVE",
          "caption": "JPEG-2000 lossless alternative (TIFF tag 33005, used by Aperio)"
        },
        {
          "value": "JPEG_2000_LOSSY",
          "caption": "JPEG-2000 lossy (TIFF tag 33004)"
        }
      ],
      "default": "JPEG"
    },
    {
      "caption": "Prefer RGB",
      "name": "preferRGB",
      "description": "If set, this function encodes JPEG images in RGB color space without subsampling. If cleared, this function encodes JPEG in more traditional YCbCr format with subsampling (skipping some of Cb and Cr values). RGB format minimizes loss of data and, so, is better for goals of image processing; YCbCr provides better compression and suitable for human viewed. In current version, this flag does not affect other compression modes, besides JPEG.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": true
    },
    {
      "caption": "Quality",
      "name": "quality",
      "description": "May contain some real value, specifying desired quality of the compression image. If not specified, some default compression quality will be applied (usually the best).\nFor JPEG compression, this value must be between 0.0 (worst) and 1.0 (best). If the quality is not specified, the default value is 1.0 (minimal loss).\nFor JPEG-2000, the minimal allowed value is ~0.3–0.5, the maximal value is not limited. If the quality is not specified, the default value is 10 for JPEG-2000 lossy or maximal possible real value for JPEG-2000 lossless. (If the quality IS specified, \"lossless\" and \"lossy\" JPEG-2000 formats actually do not differ in level of loss.)\nFor other compressions, this parameter is ignored.",
      "value_type": "String",
      "edition_type": "value",
      "default": ""
    },
    {
      "caption": "Signed integers",
      "name": "signedIntegers",
      "description": "If the image contains integer pixel values (8-, 16- or 32-bits), function marks the new IFD image as containing unsigned or signed integers, depending on this flag. Usually should be cleared (unsigned).",
      "value_type": "boolean",
      "edition_type": "value",
      "default": false,
      "advanced": true
    },
    {
      "caption": "Image description",
      "name": "imageDescription",
      "description": "May contain any string description of the newly created image (TIFF \"ImageDescription\" tag). This is required, for example, in SVS format. If not set (empty string), the new IFD will not contain \"ImageDescription\" tag.",
      "value_type": "String",
      "edition_type": "value",
      "default": ""
    },
    {
      "caption": "Resizable",
      "name": "resizable",
      "description": "If set and if this function is used many times without closing the file, the sizes of the result IFD image are calculated automatically as the minimal rectangle, containing all added frames. If cleared, the sizes of new IFD must be specified in the parameters \"X-size of the new image\" and  \"Y-size of the new image\".\nIf this function is called for single writing (the mode \"Open/reopen; read; close\" above), this flag is ignored.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": false,
      "advanced": true
    },
    {
      "caption": "Full X-size of the new image",
      "name": "imageDimX",
      "value_type": "int",
      "edition_type": "value",
      "default": 0
    },
    {
      "caption": "Full Y-size of the new image",
      "name": "imageDimY",
      "description": "Full sizes of new IFD image. If \"Resizable\" flag is set, or if this function is used for single writing (the file is opened and then immediately closed), these parameters may stay be zero; in other case, they must contain some positive values.",
      "value_type": "int",
      "edition_type": "value",
      "default": 0
    },
    {
      "caption": "X",
      "name": "x",
      "value_type": "int",
      "edition_type": "value",
      "default": 0
    },
    {
      "caption": "Y",
      "name": "y",
      "description": "(X,Y) is the position of left top pixel of the added frame (matrix) inside the full IFD image. In is usually necessary when you write image frame-by-frame in a loop.",
      "value_type": "int",
      "edition_type": "value",
      "default": 0
    },
    {
      "caption": "Tiled TIFF",
      "name": "tiled",
      "description": "If set, newly created IFD image will be tiled. This is recommended for large images, like multiscale maps. You may clear this flag if you want to write a little image.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": true
    },
    {
      "caption": "Tile width",
      "name": "tileSizeX",
      "value_type": "int",
      "edition_type": "value",
      "default": 256
    },
    {
      "caption": "Tile height",
      "name": "tileSizeY",
      "description": "Sizes of a tile in \"Tiled TIFF\" mode. Must be multiples of 16.",
      "value_type": "int",
      "edition_type": "value",
      "default": 256
    },
    {
      "caption": "Strip height",
      "name": "stripSizeY",
      "description": "If this parameter is set, it determines the height of each strip in the newly created TIFF image. If it contains 0, the image will not be stripped; this is a possible choice for small images. If this parameter is empty, some default strip height will be used.\nThis parameter is ignored in \"Tiled TIFF\" mode.",
      "value_type": "String",
      "edition_type": "value",
      "advanced": true,
      "default": ""
    },
    {
      "caption": "Flush ASAP",
      "name": "flushASAP",
      "description": "If set, this function will always flush (write to the TIFF file) all tiles that are completely filled by data, and free up the memory they occupy.\nThis is important when you are writing a large image frame-by-frame. Otherwise, this function will keep all added data in memory until finishing writing this IFD image, typically until the input port \"close file\" will become \"true\". On the other hand, if you are writing overlapping frames at the same or almost same position, you probably NEED to clear this flag.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": true
    },
    {
      "name": "visibleResult",
      "caption": "Visible result",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "absolute_path",
          "caption": "Absolute path to result file"
        },
        {
          "value": "ifd",
          "caption": "New IFD information in JSON format"
        }
      ],
      "default": "absolute_path"
    }
  ]
}