{
  "app": "executor",
  "version": "0.0.1",
  "category": "pyramids.io",
  "name": "Read plane pyramid",
  "tags": [
    "matrices",
    "i/o"
  ],
  "id": "b11c34fb-7f8a-493c-89a6-db81cb71137f",
  "language": "java",
  "java": {
    "class": "net.algart.executors.modules.maps.pyramids.io.ReadImagePyramid"
  },
  "in_ports": [
    {
      "value_type": "scalar",
      "name": "file",
      "caption": "file",
      "hint": "[Optional] String path to the file. If specified, it is used instead of \"File\" parameter (with all replacements performed in that parameter)."
    },
    {
      "value_type": "scalar",
      "name": "file_name_addition",
      "caption": "file name addition",
      "hint": "[Optional] Modification for input file name. Not used if \"file list\" is specified."
    },
    {
      "value_type": "scalar",
      "name": "file_list",
      "caption": "file list",
      "hint": "[Optional] List of pyramid files, separated by \\n (every file/subfolder name in a separate line).\nIf specified, it is used instead of \"File\" parameter and \"file\" input port; no any replacements are performed.\nWhile usage in a loop, this function sequentially process all these files.\nNamely, this list is loaded while reset of the loop (while the first iteration) and then used to switch to next pyramid, when the previous one was completely analysed."
    },
    {
      "value_type": "mat",
      "name": "input",
      "caption": "optional input",
      "hint": "If specified, this function simply returns a copy of this image (other arguments are ignored)."
    },
    {
      "value_type": "numbers",
      "caption": "ROI",
      "name": "roi",
      "hint": "[Optional] If specified and if \"Use input ROI\" flag is set, it must be 4 numbers\ndescribing a ROI rectangle (region of interest) inside whole pyramid: min_x, max_x, min_y, max_y.\nIf not specified (or if that flag is cleared), ROI is supposed to contain\nthe whole resolution level from (0, 0) to (level_dim_x−1, level_dim_y−1).\nNote: if ROI is specified, but exceed the whole resolution level, it is automatically reduced to bounds of this level.\nROI is used when \"Auto-scanning sequence\" is not \"None\" or if \"Read whole ROI\" flag is set."
    },
    {
      "value_type": "scalar",
      "name": "pyramid_configuration",
      "caption": "pyramid configuration",
      "hint": "[Optional] Some additional information, describing the pyramid, which relates to the given data and cannot be changed dynamically."
    },
    {
      "value_type": "scalar",
      "name": "rendering_configuration",
      "caption": "rendering configuration",
      "hint": "[Optional] Some additional information for customizing rendering the pyramid which can vary for the same data file."
    }
  ],
  "out_ports": [
    {
      "value_type": "mat",
      "name": "output"
    },
    {
      "value_type": "mat",
      "name": "special_image",
      "hint": "One of special images, stored together with the main pyramid (see...)"
    },
    {
      "value_type": "scalar",
      "name": "number_of_levels"
    },
    {
      "value_type": "scalar",
      "name": "level_dim_x"
    },
    {
      "value_type": "scalar",
      "name": "level_dim_y"
    },
    {
      "value_type": "scalar",
      "name": "dim_x"
    },
    {
      "value_type": "scalar",
      "name": "dim_y"
    },
    {
      "value_type": "numbers",
      "name": "rectangle",
      "hint": "4 numbers describing a rectangle that was actually read: min_x, max_x, min_y, max_y."
    },
    {
      "value_type": "scalar",
      "caption": "number of pyramids",
      "name": "number_of_pyramids",
      "hint": "Total number of analysed pyramids in the input \"file list\".\nIf there is no this list, will be always equal to 1.",
      "advanced": true
    },
    {
      "value_type": "scalar",
      "caption": "number of frames",
      "name": "number_of_frames",
      "hint": "Total number of frames in all ROIs.",
      "advanced": true
    },
    {
      "value_type": "scalar",
      "caption": "frames per series",
      "name": "frames_per_series",
      "hint": "Number of frames per every series, i.e. in horizontal row or vertical column.\nReturned only if \"Auto-scanning sequence\" parameter is not \"None\"."
    },
    {
      "value_type": "scalar",
      "caption": "recommended expansion",
      "name": "recommended_expansion",
      "hint": "Recommended changing rectangle for functions like \"Change rectangle, but inside map buffer\".\nDepends on \"Auto-scanning sequence\" parameter; if it is \"None\", returns LEFT_UP (most popular case)."
    },
    {
      "value_type": "scalar",
      "caption": "recommended number of frames in buffer",
      "name": "recommended_number_of_frames_in_buffer",
      "hint": "Recommended number of frames, stored in the buffer for resolving problem of stitching and joining objects.\nCalculated by formula in the parameter \"Recommended number of stored frames\", or equal to 1 if \"Read whole ROI\" is set."
    },
    {
      "value_type": "scalar",
      "name": "builtin_metadata",
      "hint": "Metadata, built in the pyramid file (when they exist).",
      "advanced": true
    },
    {
      "value_type": "scalar",
      "name": "metadata",
      "hint": "External metadata: JSON content of accompanying .meta-file (when it exists).",
      "advanced": true
    },
    {
      "value_type": "numbers",
      "caption": "ROI rectangles",
      "name": "metadata_roi_rectangles",
      "hint": "ROI rectangles from the accompanying .meta-file (when it exists), scaled to requested \"Resolution level\".\nFor every ROI of any form we calculate the minimal containing rectangle, consisting of all (integer) pixels (x,y), that x₁≤x≤x₂, y₁≤y≤y₂,\nand return 4 numbers (x₁+x₂)/2, (y₁+y₂)/2, x₂−x₁+1, y₂−y₁+1 (i.e. the center and sizes),\nscaled to coordinates of the selected resolution level and intersected with the input ROI\n(when it is specified) and with the whole rectangle of the level.\nEmpty rectangles (0x0, Nx0, 0xN) are not included into the result (they are not processed).\nIf there is no .meta-file, then the input ROI is returned (when it is specified) or the whole rectangle of the level (when not).",
      "advanced": true
    },
    {
      "value_type": "numbers",
      "caption": "ROI contours",
      "name": "metadata_roi_contours",
      "hint": "ROI contours from the accompanying .meta-file (when it exists), scaled to requested \"Resolution level\".\nEvery ROI is converted to standard contour format, and array of all contours is returned.\nObject label for result contours will be equal to the index of the ROI: 1,2,3,...",
      "advanced": true
    },
    {
      "value_type": "scalar",
      "caption": "current pyramid index",
      "name": "current_pyramid_index",
      "hint": "Index of current pyramid in the input \"file list\" (0,1,2,...).\nIf there is no this list, will be always equal to 0.\nYou can use this index together with \"current frame index\" to inform the user about progress status of the loop.",
      "advanced": true
    },
    {
      "value_type": "scalar",
      "caption": "current ROI index",
      "name": "current_roi_index",
      "hint": "Index of current ROI in the current pyramid (0,1,2,...).\nReturned only if \"Auto-scanning sequence\" parameter is not \"None\".",
      "advanced": true
    },
    {
      "value_type": "scalar",
      "caption": "current x-index",
      "name": "current_x_index",
      "hint": "X-index of current frame (0,1,2,...).\nReturned only if \"Auto-scanning sequence\" parameter is not \"None\".",
      "advanced": true
    },
    {
      "value_type": "scalar",
      "caption": "current y-index",
      "name": "current_y_index",
      "hint": "Y-index of current frame (0,1,2,...).\nReturned only if \"Auto-scanning sequence\" parameter is not \"None\".",
      "advanced": true
    },
    {
      "value_type": "scalar",
      "caption": "current frame index",
      "name": "current_frame_index",
      "hint": "Index of current frame among total number of frames in the current pyramid (0,1,2,...).\nReturned only if \"Auto-scanning sequence\" parameter is not \"None\".",
      "advanced": true
    },
    {
      "value_type": "numbers",
      "caption": "current ROI contours",
      "name": "current_metadata_roi_contours",
      "hint": "ROI contours from the accompanying .meta-file (when it exists), scaled to requested \"Resolution level\", corresponding to \"current ROI index\".\nObject label for result contours will be equal to the index of the ROI: 1,2,3,...\nReturned only if \"Auto-scanning sequence\" parameter is not \"None\"."
    },
    {
      "value_type": "scalar",
      "hint": "Flag true/false: it will be true if the first frame of the next ROI of the pyramid has been scanned.\nNote: if \"Auto-scanning sequence\" is \"None\", this flag is always set.",
      "name": "first_in_roi",
      "advanced": true
    },
    {
      "value_type": "scalar",
      "hint": "Flag true/false: it will be true when the next ROI of the pyramid (its last frame) has been scanned completely.\nNote: if \"Auto-scanning sequence\" is \"None\", this flag is always set.",
      "name": "last_in_roi",
      "advanced": true
    },
    {
      "value_type": "scalar",
      "hint": "Flag true/false: it will be true if the first frame of the next pyramid was scanned (directly after opening the pyramid file).\nNote: if \"Auto-scanning sequence\" is \"None\", this flag is always set.",
      "name": "first_in_pyramid",
      "advanced": true
    },
    {
      "value_type": "scalar",
      "hint": "Flag true/false: it will be true when the pyramid (its last frame of the last ROI) has been scanned completely (scanning loop inside a single file is finished).\nNote: if \"Auto-scanning sequence\" is \"None\", this flag is always set (unlike \"last\" flag).\nNote: if this flag is set, and if the advanced parameter \"Close after last frame\" is also set,\nthen the pyramid file is automatically closed at the end of executing this function.",
      "name": "last_in_pyramid",
      "advanced": true
    },
    {
      "value_type": "scalar",
      "hint": "Flag true/false: it will be true when all ROI(s) of all pyramid files have been scanned completely, i.e.\nif the scanning loop should be finished and new position is again the left top corner of or 1st ROI of the 1st pyramid file).\n See \"Auto-scanning sequence\" parameter.\nNote: if \"Auto-scanning sequence\" is \"None\" AND there is no input \"file list\", this flag is usually not necessary. But in this situation it still contains some non-trivial information.\nNamely, it will be true when the loaded frame contains right bottom pixel of the whole pyramid\nor (when specified) of the input ROI, more precisely,\nif start_X + X-size > max-x-inside-ROI and start_Y + Y-size > max-y-inside-ROI (probable assumption for most ways of scanning).\nIt may be helpful if you organize scanning loop by some external means (JavaScript etc.).\n But if there is input \"file list\", this behaviour is not implemented and the flag still means that the last file was processed.",
      "name": "last"
    },
    {
      "value_type": "scalar",
      "hint": "Flag true/false: it will be true when the pyramid file was successfully closed by this function, false if it stayed to be opened.\nUseful for debugging needs.",
      "name": "closed",
      "advanced": true
    },
    {
      "value_type": "scalar",
      "name": "absolute_path",
      "caption": "absolute path",
      "hint": "Actual full absolute path to the file",
      "advanced": true
    },
    {
      "value_type": "scalar",
      "name": "parent_folder",
      "caption": "parent folder",
      "hint": "Absolute path to the parent folder of the file",
      "advanced": true
    },
    {
      "value_type": "scalar",
      "name": "file_name",
      "caption": "file name",
      "hint": "Actual file name (without folder)",
      "advanced": true
    }
  ],
  "controls": [
    {
      "caption": "File",
      "name": "file",
      "description": "File or subfolder containing the multiscale image (pyramid).\nYou can use here relative paths (without starting \"/\" or \"c:\\\"), for example, \"test.tiff\" or \"images/test.tiff\". They will be resolved relative the current folder, containing the executed chain.\nIf this path starts with substring %TEMP%, %TEMP%/ or %TEMP%x. where x is OS-depended file separator character, this substring is replaced with the full path to the system temp directory (System.getProperty(\"java.io.tmpdir\")) with ending file separator. For example, it is correct to write here %TEMP%my_file.dat, %TEMP%/my_file.dat or (in Windows) %TEMP%\\my_file.dat.\nAlso you can use in this string Java system properties: \"${name}\", for example: \"${java.io.tmpdir}\", and executor system properties \"${path.name.ext}\", \"${path.name}\", \"${file.name.ext}\", \"${file.name}\", \"${resources}\" (chain path/file name with/without extension, resource folder of the platform, containing this function).",
      "value_type": "String",
      "edition_type": "file",
      "default": ""
    },
    {
      "name": "fileNameAdditionMode",
      "caption": "How to add \"file name addition\" (for example XXX.DAT)",
      "description": "This mode can be used together with input string \"file name addition\"",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "NONE",
          "caption": "no correction (\"file name addition\" is not used)"
        },
        {
          "value": "AFTER_ALL_PATH",
          "caption": "after all path: /path => /pathXXX.DAT"
        },
        {
          "value": "REPLACE_IN_PATH",
          "caption": "replace $$$ in path: /path/name$$$.ext => /path/nameXXX.DAT.ext"
        },
        {
          "value": "REPLACE_IN_PATH_REMOVING_EXTENSION",
          "caption": "replace $$$ with the addition, but without its extension: /path/name$$$.ext => /path/nameXXX.ext"
        }
      ],
      "default": "NONE",
      "advanced": true
    },
    {
      "caption": "Secure mode",
      "name": "secure",
      "description": "If set, \"file name addition\" feature and Java system properties in the path are disabled, and the path is checked that it does not contain \"suspicious\" characters/substring like % (property?), ${... (variable inside a string?). Executor system properties \"${path.name.ext}\", \"${path.name}\", \"${file.name.ext}\", \"${file.name}\" and starting %TEMP%/ are enabled.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": false
    },
    {
      "caption": "When to open/close pyramid file(s)?",
      "name": "openingMode",
      "description": "Recommended mode for usage in a loop (one frame per iteration) is \"Open/reopen on reset or when closed; read; not close\".\nNote: the main geometrical information about the pyramid and all metadata are read while opening the file and are not reloaded without reopening. Opening file also means resetting to 0 all internal counters, used to organize the loop inside the pyramid file.\nNote: in first 2 modes \"Open/reopen...\", the previous file, which was probably opened, is automatically closed. The 3rd mode, recommended above for loops, does the same while reset of the loop (while the first iteration).\nAlso note: the pyramid file will be closed at the end of executing this function in any case, if \"Close after last frame\" parameter is set (its default value) and either 1) if the finishing scanning loop has been finished, or 2) \"Auto-scanning sequence\" is \"None\". In addition, this file is always closed in a case of any exception.",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "OPEN_AND_CLOSE",
          "caption": "Open/reopen; read; close"
        },
        {
          "value": "OPEN",
          "caption": "Open/reopen; read; but not close"
        },
        {
          "value": "OPEN_ON_RESET_AND_FIRST_CALL",
          "caption": "Open/reopen on reset or when closed; read; not close"
        },
        {
          "value": "OPEN_ON_FIRST_CALL",
          "caption": "Open/reopen when closed; read; not close"
        }
      ],
      "default": "OPEN_ON_RESET_AND_FIRST_CALL"
    },
    {
      "caption": "Close after last frame",
      "name": "closeAfterLast",
      "description": "If set, the pyramid file is automatically closed (and all memory caches are freed) after finishing sequence of scanning the pyramid: see \"Auto-scanning sequence\" parameter.\nIMPORTANT: if \"Auto-scanning sequence\" parameter is \"None\" and this flag is set, the pyramid file will be closed ALWAYS. In other words, in this case this function works like in \"Open/reopen; read; close\" mode.\nThis flag does not prevent further reading this pyramid; if you will read something again, the file will be automatically reopened. So, usually it should be set.\nThis flag is not important if you choose re-opening every time (\"Open; read; close\" mode above).",
      "value_type": "boolean",
      "edition_type": "value",
      "default": true
    },
    {
      "caption": "Format of the pyramid",
      "name": "planePyramidFormat",
      "description": "Note that only non-pyramid format (1st case) is always available. Other formats may be added in the package.\n\"Auto-detect by extension\" mode allows to detect only SVS format; all other extension will be interpreted as \"Non-pyramid image\" case (usual formats supported by Java).",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "AUTO_DETECT_BY_EXTENSION",
          "caption": "Auto-detect by extension"
        },
        {
          "value": "JAVA_IMAGEIO",
          "caption": "Non-pyramid image (all formats supported by Java)"
        },
        {
          "value": "SVS",
          "caption": "Aperio SVS"
        },
        {
          "value": "CUSTOM",
          "caption": "Custom (factory class must be specified)"
        }
      ],
      "default": "AUTO_DETECT_BY_EXTENSION"
    },
    {
      "caption": "Factory class",
      "name": "customPlanePyramidSourceFactoryClass",
      "description": "Must contain full name of Java class, implementing PlanePyramidSourceFactory interface and providing support of this file format.",
      "value_type": "String",
      "edition_type": "value",
      "advanced": true,
      "default": ""
    },
    {
      "caption": "Resolution level",
      "name": "resolutionLevel",
      "description": "Level #0 has the best resolution, level #1 is less, etc.",
      "value_type": "int",
      "edition_type": "value",
      "default": 0
    },
    {
      "caption": "Auto-scanning sequence",
      "name": "scanningSequence",
      "description": "Sequence of scanning of the specified \"ROI\".\nNote: this parameter has sense only if there is a loop. For detecting that the loop should be finished, use the output flag \"last\". If you don't need a loop, please use the mode \"None\".",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "NONE",
          "caption": "None (use \"start X/Y\")"
        },
        {
          "value": "ROWS_LEFT_TO_RIGHT",
          "caption": "By rows, →"
        },
        {
          "value": "ROWS_BY_SNAKE",
          "caption": "By rows, ⇄ (\"snake\": →, ←, →, ...)"
        },
        {
          "value": "COLUMNS_TOP_TO_BOTTOM",
          "caption": "By columns, ↓"
        },
        {
          "value": "COLUMNS_BY_SNAKE",
          "caption": "By columns, ⇵ (\"snake\": ↓, ↑, ↓, ...)"
        },
        {
          "value": "SHORTEST_SIDE",
          "caption": "Along shortest side, → or ↓"
        },
        {
          "value": "SHORTEST_SIDE_BY_SNAKE",
          "caption": "Along shortest side, ⇄ or ⇵ (\"snake\")"
        }
      ],
      "default": "NONE"
    },
    {
      "caption": "Recommended number of stored frames (JavaScript)",
      "name": "recommendedNumberOfStoredFrames",
      "description": "For stitching needs, you usually need to store some number of frames in a buffer. For example, if you scan the pyramid by rows from left to right, and every row contain m frames, you need to have at least m+1 additional frames besides the current one to find objects, that are probably continued from the previous adjacent frames.\nThis parameter is a JavaScript formula, helping to estimate the necessary number of stored frames in such a buffer. In this script you can use the integer variable \"m\": it will be equal to the output \"frames per series\", or to the number of frames per every horizontal row if \"Auto-scanning sequence\" parameter is \"None\". Also you will have a boolean variable \"snake\", which is \"true\" for \"snake\" modes (see previous parameter).\nFor example, when you scan the pyramid by rows from left to right, the formula \"m+2\" will return possible estimation: it is enough for joining objects, which are not greater than 1 frame.\nAlso you will have a string variable \"p\", which is equal to the value of the following advanced parameter \"Variable p\".\nThis formula is used ONLY to fill the output \"recommended number of frames in buffer\". You can ignore it and create your own script for necessary estimations.",
      "value_type": "String",
      "edition_type": "value",
      "default": "snake ? 2*m : m+2"
    },
    {
      "caption": "Variable p",
      "name": "recommendedNumberOfStoredFramesP",
      "description": "Value of variable \"p\", that can be used in the previous formula. You may pass here some additional information, necessary for your formula, like the number of rows of frames, that you want to store (if it is >1), or any more complex information, for example, in a form of some JSON.\nNote that this variable is a number, if it can be correctly parsed as Integer or Double Java type, or a string in other case.",
      "value_type": "String",
      "edition_type": "value",
      "advanced": true,
      "default": ""
    },
    {
      "caption": "Use metadata",
      "name": "useMetadata",
      "description": "If set, the accompanying JSON .meta-file is used to find ROI rectangles, that will be actually analysed and returned in \"ROI rectangles\" result. Also \"metadata\" and \"ROI contours\" ports will be filled.\nIf cleared, this file is fully ignored and not loaded. It is supposed that we have only 1 ROI rectangle, that covers all the pyramid, but \"ROI contours\" will contain an empty array.\nUsually should be set.",
      "value_type": "boolean",
      "edition_type": "value",
      "advanced": true,
      "default": true
    },
    {
      "caption": "Require non-intersecting ROI rectangles",
      "name": "requireNonIntersectingRectangles",
      "description": "If set, and if the accompanying JSON .meta-file exists, this function checks, whether some of ROI rectangles, specified in this file, intersects each other, and throws an exception, if intersecting rectangles were found.\nRemind that \"ROI rectangle\" is a minimal rectangle, containing whole ROI (in a case if it is not rectangular).\nIt can be useful in the very beginning, because some solutions, based on this function, require that the frames, analysed by this function, do not intersect each other.",
      "value_type": "boolean",
      "edition_type": "value",
      "advanced": true,
      "default": false
    },
    {
      "caption": "Minimal analysed size",
      "name": "minimalAnalyzedSize",
      "description": "If this value is M>1, if the accompanying JSON .meta-file exists, this function checks, that the rectangles, specified in this file, after scaling to requested \"Resolution level\", have width ≥ M and height ≥ M. The input \"ROI\" and the sizes of the whole pyramid are also checked by the same way, and also the frame sizes (\"X-size\" and \"Y-size\" below) must be ≥ M. If some ROIs are less than M, they are excluded from the analysis, if the frame sizes are less than M, the functions throws an exception.\nRemind that \"ROI rectangle\" is a minimal rectangle, containing whole ROI (in a case if it is not rectangular).\nIt can be useful in the very beginning, because some solutions, based on this function, reduce the analysed frames by some gap; there is no sense to analyse a frame or ROI less than such gap.\nNote: if \"Read whole ROI\" flag is set, this check is not performed (but the result port \"ROI rectangles\" still not includes too small ROIs).",
      "value_type": "int",
      "edition_type": "value",
      "default": 0
    },
    {
      "caption": "Use input ROI",
      "name": "useInputROI",
      "description": "If set, the input \"ROI\" port is used (when specified). If cleared, it is ignored and ROI is supposed to be the whole pyramid.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": true
    },
    {
      "caption": "Read whole ROI",
      "name": "wholeROI",
      "description": "If set, the following 4 parameters \"Start X/Y\", \"X-size\" and \"Y-size\" are ignored, and this function reads all pixels of the input ROI as the only one frame. If there is no input ROI or if the flag \"Use input ROI\" is cleared, it means reading whole pyramid level in a single image.\nNote: if this flag is set, \"Auto-scanning sequence\" parameter is ignored in this case and considered to be \"None\". \"Recommended number of stored frames\" is also ignored, because we read only a single frame; the output \"recommended number of frames in buffer\" will be 1.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": false
    },
    {
      "caption": "Start X",
      "name": "startX",
      "value_type": "long",
      "edition_type": "value",
      "default": 0
    },
    {
      "caption": "Start Y",
      "name": "startY",
      "description": "Note: start X/Y are used only if \"Auto-scanning sequence\" is \"None\". In all other modes, they are set to (0,0) while reset (before 1st execution of the loop) and then incremented automatically (while execution of the loop, if it's present).",
      "value_type": "long",
      "edition_type": "value",
      "default": 0
    },
    {
      "caption": "X-size (frame width)",
      "name": "sizeX",
      "value_type": "long",
      "edition_type": "value",
      "default": 1000
    },
    {
      "caption": "Y-size (frame height)",
      "name": "sizeY",
      "description": "Note: zero x/y-size are not allowed, excepting a case when the flag \"Read whole ROI\" is set (then these parameters are ignored).\nAlso note: the rectangle is automatically cropped by right/bottom bounds of the layer, if \"Auto-scanning sequence\" is \"None\", and also by input ROI in other case.",
      "value_type": "long",
      "edition_type": "value",
      "default": 1000
    },
    {
      "caption": "Size unit",
      "name": "sizeUnit",
      "description": "The units, in which the previous parameters \"Start X/Y\" and \"X/Y-size\" are specified.\nDefault variant is the pixels (of the selected resolution level of the pyramid).\nAn alternative: pixels of the special image, selected by \"Special image kind\" parameter (in this case this image must exist). These values are automatically translated to the corresponded area of the full pyramid: (0,0) into (0,0), last column/row of the special image into last column/row of the selected resolution. This can be convenient when the special image is a map, used for navigation on the full pyramid.",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "PIXEL",
          "caption": "Pixels (default)"
        },
        {
          "value": "PIXEL_OF_SPECIAL_IMAGE",
          "caption": "Pixels of the selected special image"
        }
      ],
      "advanced": true,
      "default": "PIXEL"
    },
    {
      "caption": "Equalize grid",
      "name": "equalizeGrid",
      "description": "If this flag set, this function little decreases the previous frame sizes (with preserving total number of frames in the analyzed ROI) to provide better equality of sizes of cells in the frames grid. For example, if you specified X-size=1000 and the width of analyzed image is 9057, and if this flag is cleared, then the horizontal series of frames will consist of 10 frames: 9 with width 1000 and 1 with witdh 57, that is usually too little for good processing. If you will set this flag, width 1000 will be automatically replaced with new X-size = ⌈9057/10⌉ =  906, that will lead to 9 frames with width 906 and 1 frame with width 903: much better equlized grid. In any case, the total number of frames (10 in a series) is not changed.",
      "value_type": "boolean",
      "edition_type": "value",
      "advanced": true,
      "default": true
    },
    {
      "caption": "Special image kind",
      "name": "specialImageKind",
      "description": "Additional special image, that is probably stored in a pyramid file and should read together with the main image. If there no the specified image, an empty image will be returned.\nNote that this image is returned always, even it is not used via connections to other functions. If you don't need it, select \"None\".",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "NONE",
          "caption": "None"
        },
        {
          "value": "WHOLE_SLIDE",
          "caption": "Coarse image of the full slide"
        },
        {
          "value": "MAP_IMAGE",
          "caption": "Map image (for visual navigation)"
        },
        {
          "value": "LABEL_ONLY_IMAGE",
          "caption": "Label image (a little photo of some paper on the scan)"
        },
        {
          "value": "THUMBNAIL_IMAGE",
          "caption": "The thumbnail (usually generated automatically while scanning)"
        },
        {
          "value": "SMALLEST_LAYER",
          "caption": "Smallest layer (possible coarse, ALWAYS available)"
        },
        {
          "value": "CUSTOM_KIND_1",
          "caption": "Format-specific image #1"
        },
        {
          "value": "CUSTOM_KIND_2",
          "caption": "Format-specific image #2"
        },
        {
          "value": "CUSTOM_KIND_3",
          "caption": "Format-specific image #3"
        },
        {
          "value": "CUSTOM_KIND_4",
          "caption": "Format-specific image #4"
        },
        {
          "value": "CUSTOM_KIND_5",
          "caption": "Format-specific image #5"
        }
      ],
      "default": "NONE"
    },
    {
      "name": "visibleResult",
      "caption": "Visible result",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "output",
          "caption": "Main data of the pyramid layer"
        },
        {
          "value": "special_image",
          "caption": "Special image"
        },
        {
          "value": "builtin_metadata",
          "caption": "Built-in metadata"
        },
        {
          "value": "metadata",
          "caption": "External metadata"
        }
      ],
      "default": "output"
    }
  ]
}